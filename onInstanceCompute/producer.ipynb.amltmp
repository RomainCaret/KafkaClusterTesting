{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "%pip install kafka-python\n",
        "from kafka import KafkaProducer\n",
        "from kafka import KafkaConsumer\n",
        "import json\n",
        "import time\n",
        "import random\n",
        "\n",
        "tab_countries = ['France', 'UK', 'USA','Australie']\n",
        "tab_names = ['Bob','Alice','Romain','Robert','Julien','Alex','Alexandra']\n",
        "\n",
        "# Create Data with a timestamp\n",
        "def create_data_json():\n",
        "    data = {}\n",
        "    data['timestamp'] = time.time()\n",
        "    data['value'] = random.randint(0, 1000000)\n",
        "    data['name'] = random.choice(tab_names)\n",
        "    data['age'] = random.randint(18, 55)\n",
        "    data['country'] = random.choice(tab_countries)\n",
        "    return data\n",
        "\n",
        "# Create a KafkaProducer instance\n",
        "producer = KafkaProducer(\n",
        "    bootstrap_servers=[\"20.223.48.202:9094\"],\n",
        "    api_version=(0, 10, 1),\n",
        ")\n",
        "consumer = KafkaConsumer(\n",
        "    bootstrap_servers=[\"20.223.48.202:9094\"],\n",
        "    api_version=(0, 10, 1),\n",
        "    auto_offset_reset=\"earliest\",\n",
        ")\n",
        "\n",
        "# Subscribe to the \"demo\" topic\n",
        "consumer.subscribe([\"consumer-ready\"])\n",
        "\n",
        "# Send a message to the \"my-topic\" topic\n",
        "producer.send(\"demo\", \"Hello, Kafka!\".encode(\"utf-8\"))\n",
        "\n",
        "# Wait to consume the message back\n",
        "for message in consumer:\n",
        "    print(message.value.decode(\"utf-8\"))\n",
        "    break\n",
        "\n",
        "time.sleep(1)\n",
        "# Send 100 messages to the \"json-demo\" topic\n",
        "for _ in range(10):\n",
        "    for _ in range(1000):\n",
        "        data = create_data_json()\n",
        "        producer.send('json-demo', json.dumps(data).encode('utf-8'))\n",
        "time.sleep(100)\n",
        "producer.send('consumer-end', 'end'.encode('utf-8'))\n",
        "# Flush and close the producer to ensure all messages are sent\n",
        "producer.flush()\n",
        "producer.close()\n",
        "consumer.close()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: kafka-python in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (2.0.2)\nNote: you may need to restart the kernel to use updated packages.\nThis consumer is ready\n"
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1672076176127
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install kafka-python\n",
        "import os\n",
        "import argparse\n",
        "import time\n",
        "import mlflow\n",
        "import datetime, warnings, scipy\n",
        "from pathlib import Path\n",
        "import psutil\n",
        "import platform\n",
        "from datetime import datetime\n",
        "import cpuinfo\n",
        "import socket\n",
        "import uuid\n",
        "import re\n",
        "\n",
        "from kafka import KafkaProducer\n",
        "import json\n",
        "import time\n",
        "import random\n",
        "import threading\n",
        "\n",
        "tab_countries = ['France', 'UK', 'USA','Australie']\n",
        "tab_names = ['Bob','Alice','Romain','Robert','Julien','Alex','Alexandra']\n",
        "# Create random data of char of size 5ko\n",
        "load_5ko = ''.join(random.choice('0123456789ABCDEF') for i in range(30*1024))\n",
        "\n",
        "def create_producer_proc_data(pricePerHour):\n",
        "    proc = {}\n",
        "    uname = platform.uname()\n",
        "    proc['system'] = uname.system\n",
        "    proc['processor'] = uname.processor\n",
        "    proc['cpu_brand'] = cpuinfo.get_cpu_info()['brand_raw']\n",
        "    proc['cpu_hz'] = cpuinfo.get_cpu_info()['hz_actual_friendly']\n",
        "    proc['cpu_cores'] = psutil.cpu_count(logical=False)\n",
        "    proc['cpu_cores_total'] = psutil.cpu_count(logical=True)\n",
        "    svmem = psutil.virtual_memory()\n",
        "    proc['ram_total'] = svmem.total\n",
        "    proc['pricePerHour'] = pricePerHour\n",
        "    return proc\n",
        "# Create Data with a timestamp\n",
        "def create_data_json(proc_data):\n",
        "    data = {}\n",
        "    data['value'] = load_5ko\n",
        "    data['proc_prod'] = proc_data\n",
        "    data['groupID'] = 1\n",
        "    data['timestamp'] = time.time()\n",
        "    return data\n",
        "\n",
        "\n",
        "def send_data():\n",
        "    producer = KafkaProducer(\n",
        "        bootstrap_servers=[\"20.93.241.139:9094\"],\n",
        "        api_version=(0, 10, 1),\n",
        "        acks=1,\n",
        "    )\n",
        "    # Send 10000 messages to the \"json-demo\" topic\n",
        "    data = create_data_json(1)\n",
        "    data_encoded = json.dumps(data).encode('utf-8')\n",
        "    for _ in range(100):\n",
        "        # Amount of data sent in bytes\n",
        "        producer.send('background-topic0', data_encoded)\n",
        "    # Flush and close the producer to ensure all messages are sent\n",
        "    \n",
        "    producer.flush()\n",
        "    \n",
        "    producer.close()\n",
        "    print('Sent 100 messages')\n",
        "\n",
        "\n",
        "total = 0\n",
        "\n",
        "while True:\n",
        "    threading.Thread(target=send_data, args=()).start()\n",
        "    total += 10\n",
        "    # sleep a random time\n",
        "    time_to_sleep = random.gauss(1./2, 1./8)\n",
        "    if time_to_sleep > 0:\n",
        "        time.sleep(time_to_sleep)\n",
        "    if total >= 100:\n",
        "        # print('Total sent: ', total)\n",
        "        total = 0\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "for _ in range(50):\n",
        "    producer.send('consumer-end', 'end'.encode('utf-8'))\n",
        "    time.sleep(1)\n",
        "# Flush and close the producer to ensure all messages are sent\n",
        "producer.flush()\n",
        "producer.close()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: kafka-python in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (2.0.2)\nNote: you may need to restart the kernel to use updated packages.\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\nSent 40 messages\n"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb Cell 2\u001b[0m in \u001b[0;36m<cell line: 72>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=75'>76</a>\u001b[0m time_to_sleep \u001b[39m=\u001b[39m random\u001b[39m.\u001b[39mgauss(\u001b[39m1.\u001b[39m\u001b[39m/\u001b[39m\u001b[39m2\u001b[39m, \u001b[39m1.\u001b[39m\u001b[39m/\u001b[39m\u001b[39m8\u001b[39m)\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=76'>77</a>\u001b[0m \u001b[39mif\u001b[39;00m time_to_sleep \u001b[39m>\u001b[39m \u001b[39m0\u001b[39m:\n\u001b[0;32m---> <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=77'>78</a>\u001b[0m     time\u001b[39m.\u001b[39;49msleep(time_to_sleep)\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=78'>79</a>\u001b[0m \u001b[39mif\u001b[39;00m total \u001b[39m>\u001b[39m\u001b[39m=\u001b[39m \u001b[39m100\u001b[39m:\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=79'>80</a>\u001b[0m     \u001b[39m# print('Total sent: ', total)\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W1sdnNjb2RlLXJlbW90ZQ%3D%3D?line=80'>81</a>\u001b[0m     total \u001b[39m=\u001b[39m \u001b[39m0\u001b[39m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Sent 40 messages\n"
        }
      ],
      "execution_count": 14,
      "metadata": {
        "gather": {
          "logged": 1675416146959
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%pip install kafka-python\n",
        "import os\n",
        "import argparse\n",
        "import time\n",
        "import mlflow\n",
        "import datetime, warnings, scipy\n",
        "from pathlib import Path\n",
        "import psutil\n",
        "import platform\n",
        "from datetime import datetime\n",
        "import cpuinfo\n",
        "import socket\n",
        "import uuid\n",
        "import re\n",
        "\n",
        "from kafka import KafkaProducer\n",
        "import json\n",
        "import time\n",
        "import random\n",
        "import threading\n",
        "\n",
        "tab_countries = ['France', 'UK', 'USA','Australie']\n",
        "tab_names = ['Bob','Alice','Romain','Robert','Julien','Alex','Alexandra']\n",
        "\n",
        "def create_producer_proc_data(pricePerHour):\n",
        "    proc = {}\n",
        "    uname = platform.uname()\n",
        "    proc['system'] = uname.system\n",
        "    proc['processor'] = uname.processor\n",
        "    proc['cpu_brand'] = cpuinfo.get_cpu_info()['brand_raw']\n",
        "    proc['cpu_hz'] = cpuinfo.get_cpu_info()['hz_actual_friendly']\n",
        "    proc['cpu_cores'] = psutil.cpu_count(logical=False)\n",
        "    proc['cpu_cores_total'] = psutil.cpu_count(logical=True)\n",
        "    svmem = psutil.virtual_memory()\n",
        "    proc['ram_total'] = svmem.total\n",
        "    proc['pricePerHour'] = pricePerHour\n",
        "    return proc\n",
        "# Create Data with a timestamp\n",
        "def create_data_json(proc_data, groupID, linger_ms, batch_size):\n",
        "    data = {}\n",
        "    data['value'] = random.randint(0, 1000000)\n",
        "    data['name'] = random.choice(tab_names)\n",
        "    data['age'] = random.randint(18, 55)\n",
        "    data['country'] = random.choice(tab_countries)\n",
        "    data['proc_prod'] = proc_data\n",
        "    data['groupID'] = groupID\n",
        "    data['linger_ms'] = linger_ms\n",
        "    data['batch_size'] = batch_size\n",
        "    data['timestamp'] = time.time()\n",
        "    return data\n",
        "\n",
        "def send_data(line):\n",
        "    linger_ms = int(line[-2])\n",
        "    batch_size = int(line[-1])\n",
        "    topic = line[1]\n",
        "    groupID = int(line[-4])\n",
        "    num_messages = int(line[-3])\n",
        "\n",
        "    producer = KafkaProducer(\n",
        "            bootstrap_servers=[\"20.103.189.37:9094\"],\n",
        "            api_version=(0, 10, 1),\n",
        "            linger_ms=linger_ms,\n",
        "            batch_size=batch_size,)\n",
        "    for _ in range(num_messages):\n",
        "        # Transform line[-2] into int\n",
        "        data = create_data_json(proc_data, groupID, linger_ms, batch_size)\n",
        "        producer.send(topic, json.dumps(data).encode('utf-8'))\n",
        "\n",
        "    # Flush and close the producer to ensure all messages are sent\n",
        "    producer.flush()\n",
        "    producer.close()\n",
        "\n",
        "proc_data = create_producer_proc_data(0.1) # 0.1$ per hour\n",
        "\n",
        "# Sync producer and consumer\n",
        "clock = time.time()\n",
        "# Wait for clock to start a new minute\n",
        "while True:\n",
        "    if time.time() % 60 < 0.2 and time.time() > clock+20:\n",
        "        break\n",
        "    time.sleep(0.1)\n",
        "\n",
        "timeSleep = 0\n",
        "with open('dataEvent/events.csv', 'r') as f:\n",
        "    # Skip header\n",
        "    next(f)\n",
        "    for line in f:\n",
        "        line = line.split(',')\n",
        "        time.sleep(int(line[0])-timeSleep)\n",
        "        timeSleep = int(line[0])\n",
        "\n",
        "        threading.Thread(target=send_data, args=(line,)).start()\n",
        "            \n",
        "        if timeSleep % 60 <= 1:\n",
        "            print(\"Finished {} %\".format((timeSleep/(3600*3))*100))"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Requirement already satisfied: kafka-python in /anaconda/envs/azureml_py310_sdkv2/lib/python3.10/site-packages (2.0.2)\nNote: you may need to restart the kernel to use updated packages.\nFinished 0.0 %\nFinished 0.009259259259259259 %\nFinished 1.1111111111111112 %\nFinished 2.2222222222222223 %\n"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb Cell 3\u001b[0m in \u001b[0;36m<cell line: 84>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=86'>87</a>\u001b[0m \u001b[39mfor\u001b[39;00m line \u001b[39min\u001b[39;00m f:\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=87'>88</a>\u001b[0m     line \u001b[39m=\u001b[39m line\u001b[39m.\u001b[39msplit(\u001b[39m'\u001b[39m\u001b[39m,\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m---> <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=88'>89</a>\u001b[0m     time\u001b[39m.\u001b[39;49msleep(\u001b[39mint\u001b[39;49m(line[\u001b[39m0\u001b[39;49m])\u001b[39m-\u001b[39;49mtimeSleep)\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=89'>90</a>\u001b[0m     timeSleep \u001b[39m=\u001b[39m \u001b[39mint\u001b[39m(line[\u001b[39m0\u001b[39m])\n\u001b[1;32m     <a href='vscode-notebook-cell://amlext%2B2f737562736372697074696f6e732f38623533373463352d386239382d343566622d626439362d3764356134636534653532372f7265736f7572636547726f7570732f72672d7362782d61696f70732f70726f7669646572732f4d6963726f736f66742e4d616368696e654c6561726e696e6753657276696365732f776f726b7370616365732f726f6d61696e2d6d6c626f782f636f6d70757465732f746573742d6e626b/home/azureuser/cloudfiles/code/Users/romain.caret/kafka/onInstanceCompute/producer.ipynb#W2sdnNjb2RlLXJlbW90ZQ%3D%3D?line=91'>92</a>\u001b[0m     threading\u001b[39m.\u001b[39mThread(target\u001b[39m=\u001b[39msend_data, args\u001b[39m=\u001b[39m(line,))\u001b[39m.\u001b[39mstart()\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1675416147381
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python310-sdkv2"
    },
    "kernelspec": {
      "display_name": "Python 3.10 - SDK V2",
      "language": "python",
      "name": "python310-sdkv2"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.6"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}